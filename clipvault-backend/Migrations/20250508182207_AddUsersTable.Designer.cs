// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClipVault.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250508182207_AddUsersTable")]
    partial class AddUsersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClipVault.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Python"
                        },
                        new
                        {
                            Id = 2,
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            Name = "C#"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Java"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Go"
                        },
                        new
                        {
                            Id = 7,
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Swift"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 10,
                            Name = "TypeScript"
                        });
                });

            modelBuilder.Entity("ClipVault.Models.Snippet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Snippet");
                });

            modelBuilder.Entity("ClipVault.Models.SnippetTag", b =>
                {
                    b.Property<int>("SnippetId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("SnippetId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("SnippetTag");
                });

            modelBuilder.Entity("ClipVault.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Machine Learning"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Automation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Web Scraping"
                        });
                });

            modelBuilder.Entity("ClipVault.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClipVault.Models.Snippet", b =>
                {
                    b.HasOne("ClipVault.Models.Language", "Language")
                        .WithMany("Snippets")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ClipVault.Models.SnippetTag", b =>
                {
                    b.HasOne("ClipVault.Models.Snippet", "Snippet")
                        .WithMany("SnippetTags")
                        .HasForeignKey("SnippetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClipVault.Models.Tag", "Tag")
                        .WithMany("SnippetTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Snippet");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ClipVault.Models.Language", b =>
                {
                    b.Navigation("Snippets");
                });

            modelBuilder.Entity("ClipVault.Models.Snippet", b =>
                {
                    b.Navigation("SnippetTags");
                });

            modelBuilder.Entity("ClipVault.Models.Tag", b =>
                {
                    b.Navigation("SnippetTags");
                });
#pragma warning restore 612, 618
        }
    }
}
